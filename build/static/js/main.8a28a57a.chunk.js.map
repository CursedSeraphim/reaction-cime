{
  "version": 3,
  "sources": [
    "backend-connect.ts",
    "plugins/Cime/ChemDetail/ChemDetail.tsx",
    "plugins/Cime/ChemPlugin.tsx",
    "SDFLoader.ts",
    "SDFModifierDialog.tsx",
    "DatasetDrop.tsx",
    "UploadedFiles.tsx",
    "DatasetTabPanel.tsx",
    "CimeAppBar.tsx",
    "App.tsx",
    "index.tsx"
  ],
  "names": [
    "CREDENTIALS",
    "BASE_URL",
    "smiles_cache",
    "smiles_highlight_cache",
    "handleSmilesCache",
    "smiles",
    "highlight",
    "setSmilesCache",
    "data",
    "async_cache",
    "cached_data",
    "a",
    "cache",
    "handleCache",
    "key",
    "Object",
    "assign",
    "setCache",
    "value",
    "handle_errors",
    "response",
    "ok",
    "Error",
    "statusText",
    "handle_errors_json",
    "keys",
    "includes",
    "alert",
    "filename",
    "path",
    "fetch",
    "method",
    "credentials",
    "then",
    "json",
    "catch",
    "error",
    "console",
    "log",
    "smilesA",
    "smilesB",
    "controller",
    "formData",
    "FormData",
    "append",
    "my_fetch",
    "body",
    "signal",
    "localStorage",
    "getItem",
    "get_structures_from_smiles_list",
    "length",
    "name",
    "upload_sdf_file",
    "file",
    "formData_file",
    "size",
    "promise",
    "setItem",
    "get_representation_list",
    "refresh",
    "dataset_name",
    "connector_Chem",
    "connect",
    "state",
    "dataset",
    "hoverSettings",
    "rdkitSettings",
    "columns",
    "dispatch",
    "setCurrentAggregation",
    "samples",
    "selectVectors",
    "setHoverstate",
    "updater",
    "setHoverState",
    "ChemLegendParent",
    "props",
    "useCancellablePromise",
    "cancellablePromise",
    "cancelPromises",
    "mcs_only",
    "React",
    "mcsComp",
    "setMcsComp",
    "smiles_col",
    "get_smiles_col",
    "AbortController",
    "diff",
    "selection_ref",
    "get_difference_highlight",
    "selection",
    "map",
    "row",
    "every",
    "get_mcs_from_smiles_list",
    "trackPromise",
    "x",
    "style",
    "width",
    "height",
    "backgroundSize",
    "backgroundPosition",
    "backgroundRepeat",
    "backgroundImage",
    "settingsOpen",
    "setSettingsOpen",
    "repList",
    "setRepList",
    "chemComponents",
    "setChemComponents",
    "chemComponentsCurrentRep",
    "setChemComponentsCurrentRep",
    "loadRepList",
    "loading_area",
    "info",
    "rep_list",
    "splice",
    "aggregate",
    "setCurrentRep",
    "id",
    "compsCR",
    "indexOf",
    "anchorRef",
    "chemRef",
    "Box",
    "className",
    "paddingBottom",
    "paddingLeft",
    "paddingRight",
    "Tooltip",
    "title",
    "Button",
    "color",
    "ref",
    "onClick",
    "SettingsPopover",
    "open",
    "setOpen",
    "anchorEl",
    "current",
    "refreshRepList",
    "comps",
    "push",
    "Math",
    "max",
    "addComp",
    "i",
    "float",
    "ChemLegend",
    "currentRep",
    "removeComponent",
    "index",
    "minWidth",
    "UPDATER",
    "checkedList",
    "setCheckedList",
    "set_val",
    "isFunction",
    "setState",
    "this",
    "paddingTop",
    "onChange",
    "variant",
    "filter_instances",
    "filter",
    "e",
    "__meta__",
    "meshIndex",
    "handle_filter",
    "fontSize",
    "IconButton",
    "area",
    "ImageView",
    "current_rep",
    "handleMouseEnter",
    "hover_item",
    "handleMouseOut",
    "loadImage",
    "setComp",
    "forEach",
    "contourLines",
    "scale",
    "sigma",
    "showMCS",
    "doAlignment",
    "img_lst",
    "base64",
    "cpy_checked_list",
    "Grid",
    "item",
    "FormControlLabel",
    "labelPlacement",
    "control",
    "Checkbox",
    "event",
    "val",
    "j",
    "onUpdateItem",
    "target",
    "checked",
    "label",
    "src",
    "onMouseEnter",
    "onMouseOver",
    "onMouseLeave",
    "Typography",
    "get_structure_from_smiles",
    "col_names",
    "col",
    "toLowerCase",
    "removeHighlight",
    "element",
    "hoverState",
    "connector_Img",
    "comp",
    "imgList",
    "imgContainer",
    "childNodes",
    "display",
    "getElementsByTagName",
    "updateImage",
    "container",
    "getElementsByClassName",
    "idx",
    "findIndex",
    "scrollTop",
    "offsetTop",
    "setContourLines",
    "input",
    "setRDKit_contourLines",
    "setScale",
    "setRDKit_scale",
    "setSigma",
    "setRDKit_sigma",
    "setShowMCS",
    "setRDKit_showMCS",
    "setWidth",
    "setRDKit_width",
    "setRefresh",
    "setRDKit_refresh",
    "setDoAlignment",
    "setRDKit_doAlignment",
    "connector_settings",
    "Popover",
    "disablePortal",
    "onClose",
    "anchorOrigin",
    "vertical",
    "horizontal",
    "transformOrigin",
    "Paper",
    "padding",
    "FormGroup",
    "gutterBottom",
    "FormControl",
    "InputLabel",
    "shrink",
    "htmlFor",
    "Input",
    "type",
    "parseInt",
    "isNaN",
    "parseFloat",
    "inputProps",
    "step",
    "Switch",
    "_",
    "marginTop",
    "maxWidth",
    "RepresentationList",
    "options",
    "rep",
    "split",
    "inputVal",
    "pop",
    "group",
    "join",
    "replace",
    "inputValue",
    "filterOptions",
    "createFilterOptions",
    "stringify",
    "option",
    "Autocomplete",
    "newValue",
    "windowMode",
    "WindowMode",
    "Extern",
    "sort",
    "b",
    "localeCompare",
    "groupBy",
    "getOptionLabel",
    "defaultValue",
    "renderInput",
    "params",
    "TextField",
    "ChemPlugin",
    "DatasetType",
    "Chem",
    "vectors",
    "PSEPlugin",
    "d3v5",
    "require",
    "SDFLoader",
    "datasetType",
    "None",
    "entry",
    "finished",
    "modifiers",
    "abort_controller",
    "uploaded",
    "loadCSV",
    "blob",
    "result",
    "resolveContent",
    "backend_utils",
    "undefined",
    "csv",
    "vector",
    "AVector",
    "create",
    "convertFromCSV",
    "CSVLoader",
    "resolve",
    "SDFModifierDialog",
    "openSDFDialog",
    "handleClose",
    "useState",
    "setModifiers",
    "Dialog",
    "DialogTitle",
    "DialogContent",
    "DialogContentText",
    "autoFocus",
    "margin",
    "fullWidth",
    "DialogActions",
    "DatasetDrop",
    "setEntry",
    "alignItems",
    "justifyContent",
    "direction",
    "accept",
    "handleDrop",
    "files",
    "fileName",
    "endsWith",
    "reader",
    "FileReader",
    "onload",
    "content",
    "JSONLoader",
    "readAsText",
    "UploadedFiles",
    "setFiles",
    "useEffect",
    "update_files",
    "get_uploaded_files",
    "handleDelete",
    "file_name",
    "delete_file",
    "new_files",
    "overflowY",
    "flex",
    "maxHeight",
    "List",
    "subheader",
    "backgroundColor",
    "DEMO",
    "ListSubheader",
    "ListItem",
    "button",
    "ListItemText",
    "primary",
    "ListItemSecondaryAction",
    "edge",
    "DatasetTabPanel",
    "onDataSelected",
    "refreshUploadedFiles",
    "setRefreshUploadedFiles",
    "flexDirection",
    "var1",
    "var2",
    "resolvePath",
    "JJ",
    "children",
    "AppBar",
    "position",
    "Toolbar",
    "CimeAppBar",
    "href",
    "marginLeft",
    "alt",
    "PluginRegistry",
    "getInstance",
    "registerPlugin",
    "App",
    "API",
    "context",
    "config",
    "preselect",
    "url",
    "features",
    "disableEmbeddings",
    "tsne",
    "forceatlas",
    "overrideComponents",
    "datasetTab",
    "appBar",
    "ReactDOM",
    "render",
    "StrictMode",
    "document",
    "getElementById"
  ],
  "mappings": "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",
  "file": "static/js/main.8a28a57a.chunk.js",
  "sourcesContent": [
    "// CONSTANTS\n\n// export const CREDENTIALS = 'include'; // for AWS/docker\nexport const CREDENTIALS = 'omit'; // for netlify/local\n\nexport const BASE_URL = 'https://cime.caleydoapp.org'; // for netlify\n// export const BASE_URL = 'http://127.0.0.1:8080'; // for local\n// export const BASE_URL = ''; // for AWS/docker\n\n\n\nvar smiles_cache = {}\nvar smiles_highlight_cache = {}\n\nfunction handleSmilesCache(smiles: string, highlight = false) {\n    //already downloaded this image -> saved in smiles cache\n    if (highlight) {\n        return smiles_highlight_cache[smiles];\n    } else {\n        return smiles_cache[smiles];\n    }\n\n}\n\nfunction setSmilesCache(smiles, highlight = false, data) {\n    if (highlight)\n        smiles_highlight_cache[smiles] = data;\n    else\n        smiles_cache[smiles] = data;\n}\n\nasync function async_cache(cached_data) {\n    return cached_data;\n}\n\nvar cache = {}\nfunction handleCache(key) {\n    if (cache[key])\n        return Object.assign(cache[key]); // return copy of cached object\n    return null;\n}\n\nfunction setCache(key, value) {\n    cache[key] = value;\n}\n\n\nfunction handle_errors(response) {\n    if (!response.ok) {\n        throw Error(response.statusText);\n    }\n    return response;\n}\nfunction handle_errors_json(data) {\n    if (Object.keys(data).includes(\"error\")) {\n        alert(data[\"error\"]);\n    }\n    return data;\n}\n\n\nexport async function delete_file(filename) {\n    let path = BASE_URL + '/delete_file/' + filename;\n\n    return fetch(path, {\n        method: 'GET',\n        credentials: CREDENTIALS\n    })\n        .then(handle_errors)\n        .then(response => response.json())\n        .then(handle_errors_json)\n        .catch(error => {\n            alert(\"file could not be deleted. please, try again\");\n            console.log(error);\n        });\n}\n\nexport async function get_uploaded_files() {\n\n    let path = BASE_URL + '/get_uploaded_files_list';\n\n    return fetch(path, {\n        method: 'GET',\n        credentials: CREDENTIALS\n    })\n        .then(handle_errors)\n        .then(response => response.json())\n        .then(handle_errors_json)\n        .catch(error => {\n            // alert(\"could not load uploaded filenames.\")\n            console.log(error);\n        });\n}\n\nexport async function get_difference_highlight(smilesA: any, smilesB: any, controller) {\n\n    const formData = new FormData();\n    formData.append('smilesA', smilesA);\n    formData.append('smilesB', smilesB);\n\n    let path = BASE_URL + '/get_difference_highlight';\n    let my_fetch;\n    if (controller) {\n        my_fetch = fetch(path, {\n            method: 'POST',\n            body: formData,\n            credentials: CREDENTIALS,\n            signal: controller.signal\n        })\n    } else {\n        my_fetch = fetch(path, {\n            method: 'POST',\n            body: formData,\n            credentials: CREDENTIALS,\n        })\n    }\n\n    return my_fetch\n        .then(handle_errors)\n        .then(response => response.json())\n        .then(handle_errors_json)\n        .then(data => {\n            console.log(data)\n            return data[\"data\"];\n        })\n        .catch(error => {\n            // alert(\"could not load structure\");\n            console.log(error)\n        });\n}\n\n\nexport async function get_structure_from_smiles(smiles: string, highlight = false, controller) {\n    const cached_data = handleSmilesCache(smiles, highlight)\n    if (cached_data) {\n        return async_cache(cached_data);\n    }\n\n    const formData = new FormData();\n    formData.append('smiles', smiles);\n    if (localStorage.getItem(\"id\")) {\n        // @ts-ignore\n        formData.append('filename', localStorage.getItem(\"id\"));\n    }\n\n    let path = BASE_URL + '/get_mol_img';\n    if (highlight) {\n        path += \"/highlight\";\n    }\n\n    let my_fetch;\n    if (controller) {\n        my_fetch = fetch(path, {\n            method: 'POST',\n            body: formData,\n            credentials: CREDENTIALS,\n            signal: controller.signal\n        })\n    } else {\n        my_fetch = fetch(path, {\n            method: 'POST',\n            body: formData,\n            credentials: CREDENTIALS,\n        })\n    }\n\n    return my_fetch\n        .then(handle_errors)\n        .then(response => response.json())\n        .then(handle_errors_json)\n        .then(data => {\n            setSmilesCache(smiles, highlight, data[\"data\"]);\n            return data[\"data\"];\n        })\n        .catch(error => {\n            // alert(\"could not load structure\");\n            console.log(error)\n        });\n}\n\nexport async function get_structures_from_smiles_list(formData: FormData, controller?) {\n    if (localStorage.getItem(\"id\")) {\n        // @ts-ignore\n        formData.append('filename', localStorage.getItem(\"id\"));\n    }\n\n    let my_fetch;\n    if (controller) {\n        my_fetch = fetch(BASE_URL + '/get_mol_imgs', {\n            method: 'POST',\n            body: formData,\n            credentials: CREDENTIALS,\n            signal: controller?.signal\n        })\n    } else {\n        my_fetch = fetch(BASE_URL + '/get_mol_imgs', {\n            method: 'POST',\n            body: formData,\n            credentials: CREDENTIALS,\n        })\n    }\n    return my_fetch\n        .then(handle_errors)\n        .then(response => response.json())\n        .then(handle_errors_json)\n        .then(data => {\n            if (data[\"error_smiles\"].length > 0) {\n                alert(\"following smiles couldn not be parsed: \" + data[\"error_smiles\"]);\n            }\n            return data;\n        })\n        .catch(error => {\n            if (error.name === 'AbortError') {\n                console.log('Fetch aborted');\n            } else {\n                alert(\"could not load structures\");\n                console.log(error)\n            }\n        });\n}\n\n\nexport async function get_mcs_from_smiles_list(formData: FormData, controller?) {\n\n    let my_fetch;\n    if (controller) {\n        my_fetch = fetch(BASE_URL + '/get_common_mol_img', {\n            method: 'POST',\n            body: formData,\n            signal: controller?.signal\n        })\n    } else {\n        my_fetch = fetch(BASE_URL + '/get_common_mol_img', {\n            method: 'POST',\n            body: formData,\n        })\n    }\n    return my_fetch\n        .then(handle_errors)\n        .then(response => response.json())\n        .then(handle_errors_json)\n        .then(response => response[\"data\"])\n        .catch(error => {\n            // alert(\"could not get maximum common substructure\")\n            console.log(error)\n        });\n\n}\n\nexport async function get_substructure_count(smiles_list, filter) {\n    const formData = new FormData();\n    formData.append('smiles_list', smiles_list);\n    formData.append('filter_smiles', filter);\n    return fetch(BASE_URL + '/get_substructure_count', {\n        method: 'POST',\n        body: formData,\n    })\n        .then(handle_errors)\n        .then(response => response.json())\n        .then(handle_errors_json)\n        .then(data => {\n            if (Object.keys(data).includes(\"substructure_counts\"))\n                return data[\"substructure_counts\"];\n            else\n                throw Error(\"Backend responded with error: \" + data[\"error\"]);\n        })\n        .catch(error => {\n            alert(\"could not find substructure match\")\n            console.log(error)\n        });\n\n}\n\n\nexport async function upload_sdf_file(file, controller?) {\n    // upload the sdf file to the server\n    // the response is a unique filename that can be used to make further requests\n    const formData_file = new FormData();\n    formData_file.append('myFile', file);\n    formData_file.append('file_size', file.size);\n\n    const promise = fetch(BASE_URL + '/upload_sdf', {\n        method: 'POST',\n        body: formData_file,\n        credentials: CREDENTIALS,\n        signal: controller?.signal\n    })\n        .then(handle_errors)\n        .then(response => response.json())\n        .then(handle_errors_json)\n        .then(data => {\n            localStorage.setItem(\"id\", data[\"id\"]);\n        })\n        .catch(error => {\n            if (error.name === 'AbortError') {\n                console.log('Fetch aborted');\n            } else {\n                alert(\"error when uploading file. it might be too big\");\n                console.log(error);\n            }\n        });\n    return promise;\n}\n\n\nexport async function get_representation_list(refresh = false, dataset_name = \"\", controller: AbortController) {\n    if (!refresh) {\n        const cached_data = handleCache(\"representation_list_\" + dataset_name)\n        if (cached_data && cached_data[\"rep_list\"].length > 0) {\n            return async_cache(cached_data);\n        }\n    }\n    let path = BASE_URL + '/get_atom_rep_list';\n    if (localStorage.getItem(\"id\"))\n        path += \"/\" + localStorage.getItem(\"id\");\n\n\n    let my_fetch;\n    if (controller) {\n        my_fetch = fetch(path, {\n            method: 'GET',\n            credentials: CREDENTIALS,\n            signal: controller.signal\n        })\n    } else {\n        my_fetch = fetch(path, {\n            method: 'GET',\n            credentials: CREDENTIALS\n        })\n    }\n\n\n    return my_fetch\n        .then(handle_errors)\n        .then(response => response.json())\n        .then(handle_errors_json)\n        .then(data => {\n            setCache(\"representation_list_\" + dataset_name, data);\n            return data;\n        })\n        .catch(error => {\n            // alert(\"error when loading representation list\")\n            console.log(error)\n        });\n}\n\n\n\n\n\nexport async function calculate_hdbscan_clusters(X, min_cluster_size, min_cluster_samples, allow_single_cluster) {\n\n    const formData = new FormData();\n    formData.append('min_cluster_size', min_cluster_size);\n    formData.append('min_cluster_samples', min_cluster_samples);\n    formData.append('allow_single_cluster', allow_single_cluster);\n    formData.append('X', X);\n    return fetch(BASE_URL + '/segmentation', {\n        method: 'POST',\n        body: formData\n    })\n        .then(handle_errors)\n        .then(response => response.json())\n        .then(handle_errors_json)\n        .catch(error => {\n            alert(\"error when calculating clusters\")\n            console.log(error)\n        });\n}\n\n\n",
    "import * as React from 'react';\nimport './chem.scss';\nimport { Box, Button, Checkbox, createFilterOptions, FormControl, FormControlLabel, FormGroup, Grid, IconButton, Input, InputLabel, Paper, Popover, Slider, Switch, TextField, Tooltip, Typography } from '@mui/material';\nimport { trackPromise, usePromiseTracker } from \"react-promise-tracker\";\nimport { connect, ConnectedProps } from 'react-redux';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport InfoIcon from '@mui/icons-material/Info';\nimport FilterListIcon from '@mui/icons-material/FilterList';\nimport { Autocomplete } from '@mui/lab';\nimport { isFunction } from 'lodash';\nimport { setRDKit_contourLines, setRDKit_refresh, setRDKit_scale, setRDKit_showMCS, setRDKit_sigma, setRDKit_width, setRDKit_doAlignment, useCancellablePromise, LoadingIndicatorView } from 'projection-space-explorer';\nimport AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { RootState, selectVectors, setHoverState, WindowMode } from 'projection-space-explorer';\nimport { get_difference_highlight, get_mcs_from_smiles_list, get_representation_list, get_structures_from_smiles_list, get_structure_from_smiles } from '../../../backend-connect';\n\n\n\n\n\n/**\n * Chem Legend, implemented\n */\n\n const mapStateToProps_Chem = (state: RootState) => ({\n    dataset: state.dataset,\n    hoverSettings: state.hoverSettings,\n    rdkitSettings: state.rdkitSettings,\n    columns: state.dataset?.columns,\n})\nconst mapDispatchToProps_Chem = (dispatch: any) => ({\n    setCurrentAggregation: (samples: number[]) => dispatch(selectVectors(samples, false)),\n    setHoverstate: (state: any, updater: any) => dispatch(setHoverState(state, updater))\n})\nconst connector_Chem = connect(mapStateToProps_Chem, mapDispatchToProps_Chem);\n\n\n/**\n * Type that holds the props we declared above in mapStateToProps and mapDispatchToProps\n */\n type PropsFromRedux_Chem = ConnectedProps<typeof connector_Chem>\n\n type Props_Chem_Parent = PropsFromRedux_Chem & {\n     selection: any[], \n     aggregate: boolean,\n     mcs_only?: boolean,\n     diff?: boolean,\n     selection_ref?: any[],\n }\n \n\n\nexport const ChemLegendParent = connector_Chem(function (props: Props_Chem_Parent) {\n    const { cancellablePromise, cancelPromises } = useCancellablePromise();\n    if(props.mcs_only){\n        \n        const [mcsComp, setMcsComp] = React.useState(<div>loading...</div>)\n\n        let smiles_col = get_smiles_col(props.columns);\n\n        React.useEffect(() => {\n            cancelPromises();\n            \n            if(smiles_col in props.columns){\n                const controller = new AbortController();\n                let my_fetch: Promise<any>;\n\n                if(props.diff && props.selection_ref){\n                    const smilesA = props.selection.map(row => row[smiles_col]);\n                    const smilesB = props.selection_ref.map(row => row[smiles_col]);\n                    my_fetch = get_difference_highlight(smilesA, smilesB, controller);\n                }else{\n                    const formData = new FormData();\n                    props.selection.every((row) => {\n                        formData.append('smiles_list', row[smiles_col]);\n                        return true;\n                    });\n                    my_fetch = get_mcs_from_smiles_list(formData, controller);\n                }\n\n                \n                trackPromise(\n                    cancellablePromise(\n                        my_fetch.then(x => {\n                            if (x.length > 100) { // check if it is actually long enogh to be an img\n                                setMcsComp(() => <div style={{width:200, height:200, backgroundSize: \"contain\", backgroundPosition: \"center\", backgroundRepeat: \"no-repeat\", backgroundImage: `url('data:image/jpg;base64,${x}')` }}></div>);\n                            }else{\n                                setMcsComp(() => <div>{x}</div>);\n                            }\n                        }), controller\n                    )\n                );\n                \n            }\n        }, [props.selection, props.selection_ref, props.mcs_only])\n        \n\n        if(smiles_col in props.columns){\n            return <div>{mcsComp}</div>;\n        }\n        return <div>No SMILES column found.</div>\n    }\n\n\n    const [settingsOpen, setSettingsOpen] = React.useState(false);\n    const [repList, setRepList] = React.useState([\"Common Substructure\"]);\n    const [chemComponents, setChemComponents] = React.useState([0]);\n    const [chemComponentsCurrentRep, setChemComponentsCurrentRep] = React.useState([\"Common Substructure\"]);\n\n    const loadRepList = function(refresh=false){\n        if(refresh || repList.length <= 1){\n            const loading_area = \"global_loading_indicator\";\n            const controller = new AbortController();\n            trackPromise(\n                cancellablePromise(\n                    get_representation_list(refresh, props.dataset.info.path, controller)\n                        .then(x => {\n                            if(x[\"rep_list\"].length > 0){\n                                let rep_list = [...x[\"rep_list\"]];\n                                rep_list.splice(0, 0, \"Common Substructure\");\n                                setRepList(rep_list);\n                            }\n                        }), controller\n                )\n            , loading_area);\n                \n        }\n    }\n\n    const addComp = function(){\n        let comps = [...chemComponents];\n        comps.push(Math.max(...comps)+1);\n        setChemComponents(comps);\n        \n        let compsCR = [...chemComponentsCurrentRep];\n        compsCR.push(\"Common Substructure\");\n        setChemComponentsCurrentRep(compsCR);\n    }\n\n    React.useEffect(() => {\n        cancelPromises();\n        if(props.aggregate){\n            loadRepList();\n        }\n    }, []);\n\n    const removeComponent = (id) => {\n        let comps = [...chemComponents];\n        let compsCR = [...chemComponentsCurrentRep];\n        const index = comps.indexOf(id);\n        if (index > -1) {\n            comps.splice(index, 1);\n            compsCR.splice(index, 1);\n        }\n        setChemComponents(comps);\n        setChemComponentsCurrentRep(compsCR);\n    };\n    \n    const setCurrentRep = (value, id) => {\n        if(repList.includes(value)){\n            let compsCR = [...chemComponentsCurrentRep];\n            const index = chemComponents.indexOf(id);\n            compsCR[index] = value;\n            setChemComponentsCurrentRep(compsCR);\n        }\n    }\n\n    const anchorRef = React.useRef<any>();\n    const chemRef = React.useRef<any>();\n\n    if(props.aggregate){\n\n        return <Box className={\"ParentChem\"} paddingBottom={3}>\n            {props.aggregate && <Box paddingLeft={2} paddingRight={2}>\n                <Tooltip title=\"Summary Settings\">\n                    <Button style={{color:\"gray\"}} ref={anchorRef} onClick={() => setSettingsOpen(true)}><SettingsIcon></SettingsIcon>&nbsp; Settings</Button>\n                </Tooltip>\n                <SettingsPopover open={settingsOpen} setOpen={setSettingsOpen} anchorEl={anchorRef.current} refreshRepList={() => {loadRepList(true);}}></SettingsPopover>\n                <Tooltip title=\"Add Component\">\n                    <Button style={{color:\"gray\"}} onClick={() => addComp()}><AddCircleOutlineIcon></AddCircleOutlineIcon>&nbsp; Add View</Button>\n                </Tooltip>\n            </Box>}\n            <div ref={chemRef} className={\"chemComponents\"} >\n                {chemComponents.length > 1 &&\n                    <div style={{width:(props.rdkitSettings.width+20)*chemComponents.length}}>\n                        {chemComponents.map((x, i) => {\n                            return <div key={x} style={{width: (props.rdkitSettings.width+20), float:'left'}}>\n                                <ChemLegend chemRef={chemRef} setCurrentRep={(value)=>setCurrentRep(value, x)} currentRep={chemComponentsCurrentRep[i]} removeComponent={() => removeComponent(x)} id={x} rep_list={repList} selection={props.selection} aggregate={props.aggregate}></ChemLegend>\n                            </div>\n                        })}\n                    </div>\n                }\n                {chemComponents.length <= 1 &&\n                    <div>\n                        <div style={{minWidth: props.rdkitSettings.width}} key={chemComponents[0]}>\n                            <ChemLegend chemRef={chemRef} setCurrentRep={(value)=>setCurrentRep(value, chemComponents[0])} currentRep={chemComponentsCurrentRep[0]} id={chemComponents[0]} rep_list={repList} selection={props.selection} aggregate={props.aggregate}></ChemLegend>\n                        </div>\n                    </div>\n                }\n            </div>\n            \n        </Box>;\n    }else{\n        return <ChemLegend id={-1} rep_list={repList} selection={props.selection} aggregate={props.aggregate}></ChemLegend>\n    }\n\n});\n\ntype Props_Chem = PropsFromRedux_Chem & {\n    selection: any, \n    columns: any, \n    aggregate: boolean,\n    rep_list: string[],\n    id: any,\n    removeComponent?: any,\n    currentRep?: string,\n    setCurrentRep?: any,\n    chemRef?\n}\n\nconst loading_area = \"chemlegend_loading_area\";\nconst UPDATER = \"chemdetail\";\nconst ChemLegend = connector_Chem(class extends React.Component<Props_Chem, {checkedList: boolean[]}>{\n    anchorRef: any;\n\n    constructor(props){\n        super(props);\n        this.state = {\n            checkedList: [],\n        };\n    }\n\n    render(){\n        const handleMouseEnter = (i) => {\n            let hover_item = null;\n            if(i >= 0){\n                hover_item = this.props.selection[i];\n            }\n            this.props.setHoverstate(hover_item, UPDATER);\n        };\n\n        const handleMouseOut = () => {\n            let hover_item = null;\n            this.props.setHoverstate(hover_item, UPDATER);\n        };\n\n        const setCheckedList = (value) => {\n            const set_val = isFunction(value) ? value(this.state.checkedList) : value;\n            this.setState({...this.state, checkedList: set_val});\n        }\n        \n        const handle_filter = () => {\n            const filter_instances = this.props.selection.filter((x, i) => this.state.checkedList[i]);\n            if(filter_instances.length > 0){\n                setCheckedList([]);\n                this.props.setCurrentAggregation(filter_instances.map(e => e.__meta__.meshIndex));\n            }else{\n                alert(\"Please, select at least one Compound in the Summary View to filter.\")\n            }\n        }\n\n\n        if (this.props.aggregate) {\n            return <div className={\"ParentImg\"}>\n                        \n                <Box paddingLeft={2} paddingTop={1} paddingRight={2}>\n                    <RepresentationList \n                            value={this.props.currentRep}\n                            onChange={this.props.setCurrentRep}\n                            rep_list={this.props.rep_list}\n                            hoverSettings={this.props.hoverSettings}\n                    />\n                </Box>\n                    \n                <Box paddingLeft={2} paddingTop={1} paddingRight={2}>\n                    <Button \n                        size=\"small\"\n                        variant=\"outlined\"\n                        onClick={() => {handle_filter()}}><FilterListIcon fontSize={\"small\"}/>&nbsp;Confirm Selection</Button>\n                    {this.props.removeComponent && <IconButton onClick={this.props.removeComponent}><DeleteIcon></DeleteIcon></IconButton>}\n                </Box>\n                <LoadingIndicatorView area={loading_area + this.props.id}/>\n                <ImageView chemRef={this.props.chemRef} id={this.props.id} setCheckedList={setCheckedList} selection={this.props.selection} columns={this.props.columns} aggregate={this.props.aggregate} current_rep={this.props.currentRep} handleMouseEnter={handleMouseEnter} handleMouseOut={handleMouseOut} />\n                \n            </div>;\n        }\n\n        return <div><ImageView id={this.props.id} selection={this.props.selection} columns={this.props.columns} aggregate={this.props.aggregate}/></div>;\n    }\n});\n\n\nfunction loadImage(props, setComp, handleMouseEnter, handleMouseOut, cancellablePromise, setCheckedList){ \n    let smiles_col = get_smiles_col(props.columns);\n\n    const onUpdateItem = (i, val) => {\n        setCheckedList((checkedList) => {\n            const list = checkedList.map((item, j) => {\n                if (j === i) {\n                  return val;\n                } else {\n                  return item;\n                }\n            });\n            return list;\n        });\n    };\n\n    // TODO: find by meta_data -> how to handle multiple smiles columns?\n    // for (const col_name in props.columns) {\n    //     let col = props.columns[col_name];\n    //     if(col.metaInformation.imgSmiles)\n    //         smiles_col = col_name;\n    // }\n    if(smiles_col in props.columns){\n        setComp(<div></div>);\n        if(props.selection.length > 0){\n            \n            if (props.aggregate) {\n                const formData = new FormData();\n                formData.append('current_rep', props.current_rep);\n                props.selection.forEach(row => {\n                    formData.append('smiles_list', row[smiles_col]);\n                });\n                formData.append('contourLines', props.rdkitSettings.contourLines);\n                formData.append('scale', props.rdkitSettings.scale);\n                formData.append('sigma', props.rdkitSettings.sigma);\n                formData.append('showMCS', props.rdkitSettings.showMCS);\n                formData.append('width', props.rdkitSettings.width);\n                formData.append('doAlignment', props.rdkitSettings.doAlignment);\n\n                const controller = new AbortController();\n                trackPromise(\n                    cancellablePromise(get_structures_from_smiles_list(formData, controller), controller).then(x => {\n                        // @ts-ignore\n                        //const img_lst = x[\"img_lst\"].map((svg,i) => svg)\n                        const img_lst = x[\"img_lst\"].map((base64,i) => {\n                            \n                            setCheckedList((checkedList) => {\n                                let cpy_checked_list = [...checkedList];\n                                if(cpy_checked_list.length <= i){\n                                    cpy_checked_list.push(false);\n                                }\n                                return cpy_checked_list;\n                            });\n                            return <Grid className={\"legend_multiple\"} key={i} item>\n                                <FormControlLabel\n                                    labelPlacement=\"bottom\"\n                                    control={<Checkbox color=\"primary\" onChange={(event) => { onUpdateItem(i, event.target.checked); }} />}\n                                    label={<img\n                                        src={\"data:image/jpeg;base64,\" + base64} \n                                        onMouseEnter={() => {handleMouseEnter(i);}} \n                                        onMouseOver={() => {handleMouseEnter(i);}} \n                                        onMouseLeave={() => {handleMouseOut();}} \n                                        />}\n                                    />\n                                <Typography style={{paddingLeft:5}} variant=\"subtitle2\">ID: {props.selection[i][\"ID\"]}</Typography>\n                            </Grid>\n                        }) //key={props.selection[i][smiles_col]} --> gives error because sometimes smiles ocure twice\n                        //<div dangerouslySetInnerHTML={{ __html: img_lst.join(\"\") }} />\n                        setComp(img_lst);\n                    })\n                , loading_area + props.id);\n            }else{\n                let row = props.selection[0]; \n                const controller = new AbortController();\n                cancellablePromise(get_structure_from_smiles(row[smiles_col], false, controller), controller).then(x => {\n                    setComp(\n                        <div>\n                            <img className={\"legend_single\"} src={\"data:image/jpeg;base64,\" + x}/>\n                            <Typography style={{paddingLeft:5}} variant=\"subtitle2\">ID: {row[\"ID\"]}</Typography>\n                        </div>)\n                }).catch(error => console.log(error));\n            }\n        }else{\n            setComp(<div>No Selection</div>);\n        }\n    }else{\n        setComp(<div>No SMILES column found</div>);\n    }\n}\n\nfunction get_smiles_col(columns){\n    let smiles_col = \"SMILES\";\n    // TODO: find by meta_data -> how to handle multiple smiles columns? for now: just take first column that contains \"smiles\"\n    if(!(smiles_col in columns)){\n        let col_names = Object.keys(columns);\n        for (const key in col_names) {\n            let col = col_names[key];\n            if(col.toLowerCase().includes('smiles')){\n                smiles_col = col;\n                break;\n            }\n        }\n    }\n    return smiles_col;\n}\n\nfunction updateImage(props, cancellablePromise){ \n    let smiles_col = get_smiles_col(props.columns);\n\n    if(smiles_col in props.columns){\n        let imgList = props.imgContainer.childNodes;\n        if(props.selection.length == imgList.length){\n            props.imgContainer.style.display = \"none\";\n\n            const formData = new FormData();\n            formData.append('current_rep', props.current_rep);\n            props.selection.forEach(row => {\n                formData.append('smiles_list', row[smiles_col]);\n            });\n            formData.append('contourLines', props.rdkitSettings.contourLines);\n            formData.append('scale', props.rdkitSettings.scale);\n            formData.append('sigma', props.rdkitSettings.sigma);\n            formData.append('showMCS', props.rdkitSettings.showMCS);\n            formData.append('width', props.rdkitSettings.width);\n            formData.append('doAlignment', props.rdkitSettings.doAlignment);\n\n            const controller = new AbortController();\n            trackPromise(\n                cancellablePromise(get_structures_from_smiles_list(formData, controller), controller).then(x => {\n                    x[\"img_lst\"].map((base64,i) => {\n                        const cur_img = imgList[i].getElementsByTagName(\"img\")[0];\n                        cur_img.src = \"data:image/jpeg;base64,\" + base64;\n                        // cur_img.width = props.rdkitSettings.width;\n                        // cur_img.height = props.rdkitSettings.width;\n                    });\n                    props.imgContainer.style.display = \"flex\";\n                })\n            , loading_area + props.id);\n            \n        }\n    }\n}\n\nconst mapStateToProps_Img = (state: RootState) => ({\n    hoverState: state.hoverState,\n    rdkitSettings: state.rdkitSettings\n})\nconst mapDispatchToProps_Img = dispatch => ({\n    \n})\nconst connector_Img = connect(mapStateToProps_Img, mapDispatchToProps_Img);\n\n\n/**\n * Type that holds the props we declared above in mapStateToProps and mapDispatchToProps\n */\ntype PropsFromRedux_Img = ConnectedProps<typeof connector_Img>\n\ntype Props_Img = PropsFromRedux_Img & {\n    selection,\n    columns,\n    aggregate,\n    handleMouseEnter?,\n    handleMouseOut?,\n    current_rep?,\n    setCheckedList?,\n    id,\n    chemRef?\n}\n\nfunction addHighlight(element){\n    if(element && element.style){\n        element.style[\"border\"] = \"solid black 1px\";\n    }\n}\n\nfunction removeHighlight(element){\n    if(element && element.style){\n        element.style[\"border\"] = \"solid white 1px\";\n    }\n}\n\nconst ImageView = connector_Img(function ({chemRef, id, hoverState, selection, columns, aggregate, handleMouseEnter, handleMouseOut, current_rep, setCheckedList, rdkitSettings }: Props_Img) {\n    const [comp, setComp] = React.useState(<div></div>);\n    \n    const ref = React.useRef<any>()\n    const { cancellablePromise, cancelPromises } = useCancellablePromise();\n\n    React.useEffect(() => {\n        cancelPromises(); // cancel all unresolved promises\n    }, [selection, current_rep])\n\n    React.useEffect(() => {\n        if(setCheckedList)\n            setCheckedList([]);\n        loadImage({id: id, columns: columns, aggregate: aggregate, current_rep: current_rep, selection: selection, rdkitSettings: rdkitSettings}, setComp, handleMouseEnter, handleMouseOut, cancellablePromise, setCheckedList); \n    }, [selection])\n\n    React.useEffect(() => {\n        if(aggregate){\n            updateImage({id: id, columns: columns, current_rep: current_rep, selection: selection, imgContainer: ref?.current, rdkitSettings: rdkitSettings}, cancellablePromise); \n        }\n    \n    }, [current_rep, rdkitSettings.refresh]);\n    \n    React.useEffect(() => {\n        if(aggregate){\n            //@ts-ignore\n            let container = chemRef?.current;\n            let imgContainer = container.getElementsByClassName('chem-grid')[0];\n            //@ts-ignore\n            let imgList = imgContainer.childNodes;\n            if(hoverState && hoverState.data){\n                const idx = selection.findIndex((x) => x && x[\"__meta__\"] && hoverState.data[\"__meta__\"] && x[\"__meta__\"][\"meshIndex\"] == hoverState.data[\"__meta__\"][\"meshIndex\"])\n                if(idx >= 0 && imgList.length > 0){\n                    for (const i in imgList) {\n                        const img_div = imgList[i];\n                        removeHighlight(img_div);\n                    }\n                    addHighlight(imgList[idx]);\n                    \n                    if(hoverState.updater != UPDATER){\n                        if(container && imgList[idx]){\n                            //@ts-ignore\n                            container.scrollTop = imgList[idx].offsetTop - container.offsetTop;\n                            // imgList[idx]?.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'start' }) // this seems to be buggy sometimes\n                        }\n                    }\n                }\n            }else{\n                for (const i in imgList) {\n                    const img_div = imgList[i];\n                    removeHighlight(img_div);\n                }\n            }\n        }\n    }, [hoverState.data, hoverState.updater]);\n\n\n\n    return <div className={\"chemContainer\"}>\n            <Grid ref={ref} className={\"chem-grid\"} container>{comp}</Grid>\n        </div>;\n});\n\n\n\ninterface ValLabelProps {\n    children: React.ReactElement;\n    open: boolean;\n    value: number;\n}\nfunction ValueLabelComponent(props: ValLabelProps) {\n    const { children, open, value } = props;\n  \n    return (\n      <Tooltip open={open} enterTouchDelay={0} placement=\"top\" title={value}>\n        {children}\n      </Tooltip>\n    );\n  }\n\n\n\nconst mapStateToProps_settings = (state: RootState) => ({\n    rdkitSettings: state.rdkitSettings,\n})\nconst mapDispatchToProps_settings = dispatch => ({\n    setContourLines: input => dispatch(setRDKit_contourLines(input)),\n    setScale: input => dispatch(setRDKit_scale(input)),\n    setSigma: input => dispatch(setRDKit_sigma(input)),\n    setShowMCS: input => dispatch(setRDKit_showMCS(input)),\n    setWidth: input => dispatch(setRDKit_width(input)),\n    setRefresh: input => dispatch(setRDKit_refresh(input)),\n    setDoAlignment: input => dispatch(setRDKit_doAlignment(input)),\n})\nconst connector_settings = connect(mapStateToProps_settings, mapDispatchToProps_settings);\n\ntype PropsFromRedux_Settings = ConnectedProps<typeof connector_settings>\n\n\ntype SettingsPopoverProps = PropsFromRedux_Settings & {\n    open: boolean\n    setOpen: any\n    anchorEl: any\n    refreshRepList: any\n}\n\nconst SettingsPopover = connector_settings(function ({\n    open,\n    setOpen,\n    anchorEl,\n    refreshRepList,\n    rdkitSettings,\n    setContourLines,\n    setScale,\n    setSigma,\n    setShowMCS,\n    setWidth,\n    setRefresh,\n    setDoAlignment\n}: SettingsPopoverProps) {\n\n    return <Popover\n        disablePortal={true}\n        id={\"dialog to open\"}\n        open={open}\n        anchorEl={anchorEl}\n        onClose={() => setOpen(() => false)}\n        anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'right',\n        }}\n        transformOrigin={{\n            vertical: 'bottom',\n            horizontal: 'left',\n        }}\n    >\n        <div>\n            <Paper style={{padding: 10, minWidth: 300}}>\n                <FormGroup>\n                    <Button \n                        size=\"small\"\n                        variant=\"outlined\" \n                        aria-label={\"Refresh Representation List\"} onClick={() => refreshRepList(true)}>\n                            <RefreshIcon/>Refresh Representation List\n                    </Button>\n                    <Typography variant=\"subtitle2\" gutterBottom>RDKit Settings</Typography>\n\n                    {/* https://github.com/rdkit/rdkit/blob/master/rdkit/Chem/Draw/SimilarityMaps.py */}\n                    {/* how many contour lines should be drawn [0;inf] */}\n                    <FormControl>\n                        <InputLabel shrink htmlFor=\"contourLinesInput\">Contour Lines <Tooltip title=\"Number of Contour Lines [0; &infin;] &isin; &#8469;\"><InfoIcon fontSize=\"small\"></InfoIcon></Tooltip></InputLabel>\n                        <Input id=\"contourLinesInput\" type=\"number\" \n                            value={rdkitSettings.contourLines}\n                            onChange={(event) => { \n                                let val = parseInt(event.target.value);\n                                if(isNaN(val))\n                                    setContourLines(event.target.value);\n                                else\n                                    setContourLines(Math.max(val, 0));\n                                }} />\n                    </FormControl>\n\n                    {/* scale tells the programm about how to scale the weights [-1;inf]; default is -1 which means that it is inherted by the algorithm*/}\n                    <FormControl>\n                        <InputLabel shrink htmlFor=\"ScaleInput\">Scale <Tooltip title=\"Weight Scale [-1; &infin;] &isin; &#8477;\"><InfoIcon fontSize=\"small\"></InfoIcon></Tooltip></InputLabel>\n                        <Input id=\"ScaleInput\" type=\"number\" \n                            value={rdkitSettings.scale}\n                            onChange={(event) => { \n                                let val = parseFloat(event.target.value);\n                                if(isNaN(val))\n                                    setScale(event.target.value);\n                                else\n                                    setScale(Math.max(val, -1)); \n                            }} />\n                    </FormControl>\n\n                    {/* sigma is for gaussian ]0;~0.2?]; default 0 means that the algorithm infers the value from the weights */}\n                    <FormControl>\n                        <InputLabel shrink htmlFor=\"SigmaInput\">Sigma <Tooltip title=\"Sigma for Gaussian ]0; &infin;] &isin; &#8477;. Default of 0 signals the algorithm to infer the value.\"><InfoIcon fontSize=\"small\"></InfoIcon></Tooltip></InputLabel>\n                        <Input id=\"SigmaInput\" type=\"number\" \n                            inputProps={{step: 0.1}}\n                            value={rdkitSettings.sigma}\n                                onChange={(event) => { \n                                    let val = parseFloat(event.target.value);\n                                    if(isNaN(val))\n                                        setSigma(event.target.value);\n                                    else\n                                        setSigma(Math.max(val, 0)); \n                        }} />\n                    </FormControl>\n\n\n                    <FormControlLabel\n                        control={<Switch color=\"primary\" checked={rdkitSettings.showMCS} onChange={(_, value) => {setShowMCS(value);}} />}\n                        label=\"Show MCS\"\n                    />\n\n                    <FormControlLabel\n                        control={<Switch color=\"primary\" checked={rdkitSettings.doAlignment} onChange={(_, value) => {setDoAlignment(value);}} />}\n                        label=\"Align Structure\"\n                    />\n\n                    <Typography style={{paddingTop: 10}} gutterBottom>Image Width</Typography>\n                    {/**<Slider\n                        ValueLabelComponent={ValueLabelComponent}\n                        value={rdkitSettings.width}\n                        onChange={(event, new_val) => {\n                            setWidth(new_val); \n                        }}\n                        min={50}\n                        max={500}\n                        step={10}\n                    />**/}\n\n                    <Button \n                        style={{marginTop: 3, maxWidth: 150}}\n                        size=\"small\"\n                        variant=\"outlined\" \n                         onClick={() => {setRefresh(rdkitSettings.refresh+=1)}}>\n                            Apply Settings\n                        </Button>\n                </FormGroup>\n            </Paper>\n        </div>\n\n    </Popover>\n});\n\n\nconst RepresentationList = props => {\n\n    const options = props.rep_list.map((rep) => {\n        let split = rep.split('_');\n        const inputVal = split.pop();\n        let group = split.join('_');\n        group = group.replace('atom.dprop.','');\n        group = group.replace('atom.dprop','');\n        return {\n            group: group,\n            value: rep,\n            inputValue: inputVal\n        };\n    });\n\n    const filterOptions = createFilterOptions({\n        stringify: (option:any) => { return option.value; },\n    });\n\n    return <Autocomplete\n            size={\"small\"}\n            className={props.className}\n            filterOptions={filterOptions}\n            onChange={(event, newValue) => {\n                if(newValue)\n                    props.onChange(newValue.value);\n            }}\n            disablePortal={props.hoverSettings.windowMode == WindowMode.Extern}\n            options={options.sort((a, b) => -b.group.localeCompare(a.group))}\n            groupBy={(option:any) => option.group}\n            getOptionLabel={(option:any) => option.inputValue}\n            \n            style={{ maxWidth: 300 }}\n            defaultValue={options[0]}\n            \n            renderInput={(params) => <TextField {...params} label=\"Choose Representation\" variant=\"outlined\" />}\n        />\n};\n//getOptionSelected={(option:any, value) => {return option.value == value.value;}}",
    "import { API, DatasetType, IVector, PSEContextProvider, PSEPlugin } from \"projection-space-explorer\";\nimport { ChemLegendParent } from \"./ChemDetail/ChemDetail\";\n\n\nexport class ChemPlugin extends PSEPlugin {\n    type = DatasetType.Chem;\n\n    createFingerprint(vectors: IVector[], scale: number, aggregate: boolean): JSX.Element {\n        return <ChemLegendParent selection={vectors} aggregate={aggregate}></ChemLegendParent>\n    }\n}\n",
    "\nimport * as backend_utils from \"./backend-connect\";\nimport { trackPromise } from \"react-promise-tracker\";\nimport { AVector, CSVLoader, DatasetType, IVector, Loader } from \"projection-space-explorer\";\n\nvar d3v5 = require('d3')\n\nfunction convertFromCSV(vectors) {\n    return vectors.map(vector => {\n        return AVector.create(vector)\n    })\n}\n\nexport class SDFLoader implements Loader {\n    vectors: IVector[] = []\n    datasetType: DatasetType = DatasetType.None\n\n    loading_area = \"global_loading_indicator\";\n\n    constructor() {\n    }\n    resolvePath(entry: any, finished: any, cancellablePromise?, modifiers?: string, abort_controller?) {\n        if(entry.uploaded){ // use file that is already uploaded to backend\n            localStorage.setItem(\"id\", entry.path);\n            this.loadCSV(finished, entry, cancellablePromise, modifiers, abort_controller);\n        }else{\n            trackPromise(\n                fetch(entry.path, {signal: abort_controller?.signal}).then(response => response.blob())\n                .then(result => this.resolveContent(result, finished, cancellablePromise, modifiers, abort_controller))\n                .catch(error => {console.log(error)})\n            , this.loading_area);\n        }\n    }\n\n    \n    resolveContent(file, finished, cancellablePromise?, modifiers?: string, controller?) {\n        const promise = cancellablePromise ? cancellablePromise(backend_utils.upload_sdf_file(file, controller), controller) : backend_utils.upload_sdf_file(file, controller)\n        trackPromise(\n            promise.then(() => {\n                this.loadCSV(finished, { display: \"\", type: this.datasetType, path: file.name }, cancellablePromise, modifiers, controller);\n            })\n            .catch(error => {\n                console.log(error);\n            })\n        , this.loading_area);\n\n    }\n\n    loadCSV(finished, entry, cancellablePromise?, modifiers?:string, controller?){\n        // request the server to return a csv file using the unique filename\n        let path = backend_utils.BASE_URL+'/get_csv/'\n        const filename = localStorage.getItem(\"id\")\n        if(filename !== undefined){\n            path += filename;\n        }\n        path += \"/\";\n        path += modifiers;\n        const promise = cancellablePromise ? cancellablePromise(d3v5.csv(path, {credentials: backend_utils.CREDENTIALS, signal: controller?.signal}), controller) : d3v5.csv(path, {credentials: backend_utils.CREDENTIALS, signal: controller?.signal})\n        trackPromise(\n            promise.then(vectors => {\n                this.vectors = convertFromCSV(vectors);\n                this.datasetType = DatasetType.Chem;\n                new CSVLoader().resolve(finished, this.vectors, this.datasetType, entry);\n            })\n            .catch(error => {console.log(error)})\n        , this.loading_area);\n    }\n    \n\n}",
    "import { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, TextField } from \"@mui/material\";\nimport React from \"react\";\n\n\nexport function SDFModifierDialog({openSDFDialog, handleClose}) {\n    const [modifiers, setModifiers] = React.useState(\"\");\n    function handleModifierChange(event) {\n        setModifiers(event.target.value);\n    }\n\n    return <Dialog maxWidth='lg' open={openSDFDialog} onClose={() => handleClose(null)}>\n        <DialogTitle>Specify Modifiers</DialogTitle>\n        <DialogContent>\n            <DialogContentText>\n                Manually specify modifiers separated by semicolons e.g. \"pred;fp;latent\". <br/>\n                You can also leave this field empty, if the modifiers are included by default. <br/>\n                The following modifiers are included by default: \"pred\", \"predicted\", \"measured\", \"fingerprint\", \"rep\".\n            </DialogContentText>\n            <TextField\n                autoFocus\n                margin=\"dense\"\n                id=\"modifiers\"\n                label=\"Modifiers\"\n                value={modifiers}\n                onChange={handleModifierChange}\n                fullWidth={true} />\n        </DialogContent>\n        <DialogActions>\n            <Button onClick={() => handleClose(null) }>\n                Cancel\n            </Button>\n            <Button onClick={() => handleClose(modifiers) }>\n                Start\n            </Button>\n        </DialogActions>\n    </Dialog>\n}",
    "import { Grid } from \"@mui/material\";\nimport { CSVLoader, JSONLoader } from \"projection-space-explorer\";\nimport { DragAndDrop } from \"projection-space-explorer\";\nimport React from \"react\";\nimport { SDFLoader } from \"./SDFLoader\";\nimport { SDFModifierDialog } from \"./SDFModifierDialog\";\n\nexport var DatasetDrop = ({ onChange, cancellablePromise, abort_controller }) => {\n    const [entry, setEntry] = React.useState(null);\n    const [openSDFDialog, setOpen] = React.useState(false);\n    \n\n    function onModifierDialogClose(modifiers){\n        setOpen(false); \n        if(modifiers !== null){\n            abort_controller = new AbortController();\n            new SDFLoader().resolveContent(entry, onChange, cancellablePromise, modifiers, abort_controller);\n        }\n    }\n\n    return <Grid container item alignItems=\"stretch\" justifyContent=\"center\" direction=\"column\" style={{ padding: '16px' }}>\n        <DragAndDrop accept=\"image/*\" handleDrop={(files) => {\n            if (files == null || files.length <= 0) {\n                return;\n            }\n\n            var file = files[0]\n            var fileName = file.name as string\n\n            if(fileName.endsWith('sdf')){\n                setEntry(file);\n                setOpen(true);\n            }else{\n\n                var reader = new FileReader()\n                reader.onload = (event) => {\n                    var content = event?.target?.result\n\n                    if (fileName.endsWith('json')) {\n                        new JSONLoader().resolveContent(content, onChange)\n                    } else {\n                        new CSVLoader().resolveContent(content, onChange)\n                    }\n                }\n\n                reader.readAsText(file)\n            }\n\n\n        }}>\n            <div style={{ height: 200 }}></div>\n        </DragAndDrop>\n        <SDFModifierDialog openSDFDialog={openSDFDialog} handleClose={onModifierDialogClose}></SDFModifierDialog>\n    </Grid>\n}\n",
    "import { Button, Divider, Grid, IconButton, List, ListItem, ListItemSecondaryAction, ListItemText, ListSubheader } from \"@mui/material\"\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { DatasetType, LoadingIndicatorView, useCancellablePromise } from \"projection-space-explorer\";\nimport React from \"react\";\nimport { BiRefresh } from \"react-icons/bi\";\nimport { trackPromise } from \"react-promise-tracker\";\nimport { DEMO } from \"./App\";\nimport { delete_file, get_uploaded_files } from \"./backend-connect\";\n\n\nexport const UploadedFiles = ({ onChange, refresh }) => {\n    const [files, setFiles] = React.useState<any>(null);\n    const { cancellablePromise } = useCancellablePromise();\n\n    React.useEffect(()=>{\n        update_files();\n    }, [refresh]);\n\n    var handleClick = (entry) => {\n        onChange(entry)\n    }\n\n    const loading_area = \"update_uploaded_files_list\";\n    \n    function update_files(){\n        trackPromise(\n            cancellablePromise(get_uploaded_files()).then((data: any) => {\n                if(data && Object.keys(data).includes(\"file_list\"))\n                    setFiles(data[\"file_list\"])\n        }).catch(error => console.log(error)), loading_area);\n    }\n    \n    var handleDelete = (file_name) => {\n        cancellablePromise(delete_file(file_name)).then((x: any) => {\n            if(x && x['deleted'] == \"true\"){\n                const new_files = [...files];\n                const index = new_files.indexOf(file_name);\n                if (index > -1) {\n                    new_files.splice(index, 1);\n                }\n                setFiles(new_files);\n            }\n        }).catch(error => console.log(error));\n    }\n    \n    return (files && <div> \n        <Grid item style={{ overflowY: 'auto', flex: '1 1 auto', maxHeight: '400px' }}>\n\n        <List subheader={<li />} style={{ backgroundColor: 'white' }}>\n            {!DEMO && <ListSubheader>Uploaded Files <Button onClick={() => update_files()}><BiRefresh/></Button></ListSubheader>}\n            {DEMO && <ListSubheader>Select Dataset</ListSubheader>}\n            {\n            files.map(file_name => (\n                <ListItem style={{ maxWidth:'270px', }} key={file_name} button onClick={() => {\n                    handleClick({\n                        display: file_name,\n                        path: file_name,\n                        type: DatasetType.Chem,\n                        uploaded: true // indicates that file is already uploaded\n                    })\n                }\n                }>\n                    <ListItemText primary={file_name}></ListItemText>\n                    {!DEMO && <ListItemSecondaryAction onClick={() => {handleDelete(file_name)}}>\n                        <IconButton edge=\"end\" aria-label=\"delete\">\n                            <DeleteIcon />\n                        </IconButton>\n                    </ListItemSecondaryAction>}\n                </ListItem>\n            ))\n            }\n        </List>\n        <LoadingIndicatorView area={loading_area}/>\n    </Grid></div>) //<Divider/>\n}\n\n",
    "import { Box, Typography } from \"@mui/material\";\nimport { LoadingIndicatorDialog, useCancellablePromise } from \"projection-space-explorer\";\nimport React from \"react\";\nimport { DatasetDrop } from \"./DatasetDrop\";\nimport { SDFLoader } from \"./SDFLoader\";\nimport { SDFModifierDialog } from \"./SDFModifierDialog\";\nimport { UploadedFiles } from \"./UploadedFiles\";\n\n\nexport function DatasetTabPanel({ onDataSelected }) {\n    const [entry, setEntry] = React.useState(null);\n    const [openSDFDialog, setOpen] = React.useState(false);\n    const [refreshUploadedFiles, setRefreshUploadedFiles] = React.useState(0);\n\n    const { cancellablePromise, cancelPromises } = useCancellablePromise();\n    let abort_controller = new AbortController();\n\n    function onModifierDialogClose(modifiers) {\n        setOpen(false);\n        if (modifiers !== null){\n            abort_controller = new AbortController();\n            new SDFLoader().resolvePath(entry, onDataSelected, cancellablePromise, modifiers, abort_controller);\n        }\n    }\n\n    return <div style={{ display: 'flex', flexDirection: 'column', height: '100%' }}>\n        <Box paddingLeft={2} paddingTop={2}>\n            <Typography variant=\"subtitle2\" gutterBottom>{'Custom Datasets (Drag and Drop)'}</Typography>\n        </Box>\n\n        <DatasetDrop onChange={(var1, var2) => {\n                onDataSelected(var1, var2);\n                setRefreshUploadedFiles(refreshUploadedFiles + 1);\n            }} cancellablePromise={cancellablePromise} abort_controller={abort_controller} />\n\n\n\n        <Box paddingLeft={2} paddingTop={2}>\n            <Typography variant=\"subtitle2\" gutterBottom>{'Predefined Datasets'}</Typography>\n        </Box>\n        \n        <UploadedFiles onChange={(entry)=>{\n            setEntry(entry);\n            setOpen(true);\n        }} refresh={refreshUploadedFiles} />\n\n\n        <LoadingIndicatorDialog handleClose={() => {cancelPromises();}} area={\"global_loading_indicator\"}/>\n\n        <SDFModifierDialog openSDFDialog={openSDFDialog} handleClose={onModifierDialogClose}></SDFModifierDialog>\n    </div>\n}\n\n",
    "import { Toolbar } from \"@mui/material\";\nimport { AppBar, Typography } from \"@mui/material\";\nimport { PseAppBar } from \"projection-space-explorer\";\n\nfunction JJ({ children }) {\n    return <AppBar variant=\"outlined\" position=\"relative\" color=\"transparent\">\n        <Toolbar>\n            {children}\n        </Toolbar>\n    </AppBar>\n}\n\nexport function CimeAppBar() {\n    return <JJ>\n        <a href={\"https://www.bayer.com\"} target={\"_blank\"}><img style={{ height: 48, marginLeft: 48 }} src={\"textures/bayer-logo.svg\"} alt=\"Powered By Bayer\" /></a>\n        <Typography variant=\"h6\" style={{ marginLeft: 48, color: \"rgba(0, 0, 0, 0.54)\" }}>\n            {\"CIME: Chem-Informatics Model Explorer\"}\n        </Typography>\n    </JJ>\n}",
    "import { useState } from 'react';\nimport './App.css';\nimport { PSEContextProvider, API, Application, PluginRegistry } from 'projection-space-explorer';\nimport { ChemPlugin } from './plugins/Cime/ChemPlugin';\nimport { DatasetTabPanel } from './DatasetTabPanel';\nimport { CimeAppBar } from './CimeAppBar';\n\n\nexport const DEMO = false\n\n/**\n *               <a href={\"https://jku-vds-lab.at\"} target={\"_blank\"}><VDSLogo style={{ height: 48, width: 48 }}></VDSLogo></a>\n              {frontend_utils.CHEM_PROJECT && <a href={\"https://www.bayer.com\"} target={\"_blank\"}><img style={{ height: 48, marginLeft: 48 }} src={\"textures/bayer-logo.svg\"} alt=\"Powered By Bayer\" /></a>}\n              <Typography variant=\"h6\" style={{ marginLeft: 48, color: \"rgba(0, 0, 0, 0.54)\" }}>\n                {frontend_utils.CHEM_PROJECT ? \"CIME: Chem-Informatics Model Explorer\" : \"Projection Space Explorer\"}\n              </Typography>\n */\n\nPluginRegistry.getInstance().registerPlugin(new ChemPlugin())\n\n\nfunction App() {\n  const [context, setContext] = useState(new API())\n\n  return <PSEContextProvider context={context}>\n    <Application\n      config={{\n        preselect: { url: 'datasets/test.sdf' }\n      }}\n      features={{\n        disableEmbeddings: {\n          tsne: true,\n          forceatlas: true\n        }\n      }}\n      overrideComponents={{\n        datasetTab: DatasetTabPanel,\n        appBar: CimeAppBar\n      }} />\n  </PSEContextProvider>\n}\n\nexport default App;",
    "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App></App>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"
  ],
  "sourceRoot": ""
}
